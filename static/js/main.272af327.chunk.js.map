{"version":3,"sources":["components/Place.js","components/PlaceList.js","components/Map.js","sample-places.js","components/App.js","serviceWorker.js","index.js"],"names":["place","handleClick","e","index","props","selectPlace","this","name","imageUrl","price","priceCurrency","isSelected","selectedPlace","onClick","className","style","backgroundImage","React","Component","PlaceList","places","map","Place","key","Map","lat","lng","App","state","samplePlaces","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAyBeA,E,4MAtBXC,YAAc,SAACC,GACX,IAAMC,EAAQ,EAAKC,MAAMD,MACzB,EAAKC,MAAMC,YAAYF,I,uDAEjB,IAAD,EAC4CG,KAAKF,MAAMJ,MAApDO,EADH,EACGA,KAAMC,EADT,EACSA,SAAUC,EADnB,EACmBA,MAAOC,EAD1B,EAC0BA,cACzBC,EACJL,KAAKF,MAAMQ,eACXN,KAAKF,MAAMQ,cAAcJ,WAAaA,EAExC,OACI,yBACIK,QAASP,KAAKL,YACda,UAAS,eAAUH,EAAa,SAAW,IAC3CI,MAAO,CAAEC,gBAAgB,OAAD,OAASR,EAAT,OACxB,yBAAKM,UAAU,cAAcL,EAA7B,IAAqCC,GACrC,yBAAKI,UAAU,oBAAoBP,Q,GAjB/BU,IAAMC,WCkBXC,E,uKAfD,IAAD,OACGC,EAAWd,KAAKF,MAAhBgB,OACR,OACI,yBAAKN,UAAU,cACVM,EAAOC,KAAI,SAACrB,EAAOG,GAAR,OAAkB,kBAACmB,EAAD,CAC1BjB,YAAa,EAAKD,MAAMC,YACxBO,cAAe,EAAKR,MAAMQ,cAC1BZ,MAAOA,EACPG,MAAOA,EACPoB,IAAKvB,EAAMQ,mB,GAVPS,IAAMC,WC0CfM,G,6KAhCX,MAAO,CACLC,IAAKnB,KAAKF,MAAMQ,cAAca,IAC9BC,IAAKpB,KAAKF,MAAMQ,cAAcc,O,uCAXlBT,IAAMC,YC8CTE,EAnDA,CACX,CACIb,KAAM,mDACNC,SAAU,sFACVC,MAAO,IACPC,cAAe,MACfe,IAAK,UACLC,IAAK,SAET,CACInB,KAAM,kCACNC,SAAU,sFACVC,MAAO,IACPC,cAAe,MACfe,IAAK,UACLC,IAAK,UAET,CACInB,KAAM,qCACNC,SAAU,sFACVC,MAAO,IACPC,cAAe,MACfe,IAAK,UACLC,IAAK,UAET,CACInB,KAAM,oCACNC,SAAU,sFACVC,MAAO,IACPC,cAAe,MACfe,IAAK,SACLC,IAAK,UAET,CACInB,KAAM,2CACNC,SAAU,sFACVC,MAAO,IACPC,cAAe,MACfe,IAAK,UACLC,IAAK,UAET,CACInB,KAAM,6BACNC,SAAU,sFACVC,MAAO,GACPC,cAAe,MACfe,IAAK,UACLC,IAAK,WCjBEC,E,4MAxBbC,MAAQ,CACNR,OAAQS,EACRjB,cAAeiB,EAAa,I,EAG9BxB,YAAc,SAACkB,GACb,IAAMX,EAAgB,EAAKgB,MAAMR,OAAOG,GACxC,EAAKO,SAAS,CAAElB,mB,uDAIhB,OACE,yBAAKE,UAAU,OACb,kBAAC,EAAD,CACET,YAAaC,KAAKD,YAClBe,OAAQd,KAAKsB,MAAMR,OACnBR,cAAeN,KAAKsB,MAAMhB,gBAE5B,kBAAC,EAAD,CAAKA,cAAeN,KAAKsB,MAAMhB,qB,GAnBrBK,IAAMC,WCOJa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.272af327.chunk.js","sourcesContent":["import React from 'react';\n\nclass place extends React.Component {\n    handleClick = (e) => {\n        const index = this.props.index;\n        this.props.selectPlace(index);\n    }\n    render() {\n        const { name, imageUrl, price, priceCurrency } = this.props.place;\n        const isSelected =\n          this.props.selectedPlace &&\n          this.props.selectedPlace.imageUrl === imageUrl;\n\n        return (\n            <div \n                onClick={this.handleClick}\n                className={`card ${isSelected ? 'active' : ''}`}\n                style={{ backgroundImage: `url(${imageUrl})`}}>\n                <div className=\"card-price\">{price} {priceCurrency}</div>\n                <div className=\"card-description\">{name}</div>\n            </div>\n        )\n    };\n}\n\nexport default place;","import React from 'react';\n\nimport Place from './Place';\n\nclass PlaceList extends React.Component {\n    render() {\n        const { places } = this.props;\n        return (\n            <div className=\"place-list\">\n                {places.map((place, index) => <Place \n                    selectPlace={this.props.selectPlace}\n                    selectedPlace={this.props.selectedPlace}\n                    place={place} \n                    index={index}\n                    key={place.imageUrl} />)}\n            </div>\n        )\n    };\n}\n\nexport default PlaceList;","import React from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport Marker from './Marker';\n\n\nclass Map extends React.Component {\n  //   static defaultProps = {\n  //     center: {\n  //       lat: 59.95,\n  //       lng: 30.33,\n  //     },\n  //     zoom: 11,\n  //   };\n  center() {\n    return {\n      lat: this.props.selectedPlace.lat,\n      lng: this.props.selectedPlace.lng,\n    };\n  }\n\n  render() {\n    const GOOGLEMAP_API_KEY = process.env.REACT_APP_GOOGLEMAP_API_KEY;\n    // const center = {\n    //   lat: this.props.selectedPlace.lat,\n    //   lng: this.props.selectedPlace.lng,\n    // };\n\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: \"100vh\", width: \"40%\" }}>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: GOOGLEMAP_API_KEY }}\n          defaultCenter={this.center()}\n          defaultZoom={11}\n        >\n          <Marker\n            lat={this.center().lat}\n            lng={this.center().lng}\n          />\n        </GoogleMapReact>\n      </div>\n    );\n  }\n}\n\n\nexport default Map;\n\n","const places = [\n    {\n        name: \"Charm at the Steps of the Sacre Coeur/Montmartre\",\n        imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat1.jpg\",\n        price: 164,\n        priceCurrency: \"EUR\",\n        lat: 48.884211,\n        lng: 2.34689\n    },\n    {\n        name: \"Trendy Apt in Buttes Montmartre\",\n        imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat2.jpg\",\n        price: 200,\n        priceCurrency: \"EUR\",\n        lat: 48.885707,\n        lng: 2.343543\n    },\n    {\n        name: \"Super 60m2 in trendy neighborhood!\",\n        imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat3.jpg\",\n        price: 150,\n        priceCurrency: \"EUR\",\n        lat: 48.885312,\n        lng: 2.341225\n    },\n    {\n        name: \"Splendide terrasse vue imprenable\",\n        imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat4.jpg\",\n        price: 115,\n        priceCurrency: \"EUR\",\n        lat: 48.88184,\n        lng: 2.343371\n    },\n    {\n        name: \"Superbe vue à 2 min du Sacré Coeur\",\n        imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat5.jpg\",\n        price: 135,\n        priceCurrency: \"EUR\",\n        lat: 48.888839,\n        lng: 2.339208\n    },\n    {\n        name: \"Bohemian and Chic in Paris\",\n        imageUrl: \"https://raw.githubusercontent.com/lewagon/flats-boilerplate/master/images/flat6.jpg\",\n        price: 90,\n        priceCurrency: \"EUR\",\n        lat: 48.827855,\n        lng: 2.350774\n    }\n];\n\nexport default places;","import React from 'react';\nimport PlaceList from './PlaceList';\nimport Map from './Map';\nimport samplePlaces from '../sample-places';\n\nclass App extends React.Component {\n  state = {\n    places: samplePlaces,\n    selectedPlace: samplePlaces[0]\n  }\n\n  selectPlace = (key) => {\n    const selectedPlace = this.state.places[key];\n    this.setState({ selectedPlace });\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <PlaceList \n          selectPlace={this.selectPlace}\n          places={this.state.places} \n          selectedPlace={this.state.selectedPlace}\n        />\n        <Map selectedPlace={this.state.selectedPlace} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n// css\nimport './css/style.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}